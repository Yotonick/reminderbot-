            add_reminder(chat_id, reminder_time, message, context)
        except Exception as e:
            update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY HH:MM —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'.")

def add_reminder(chat_id, reminder_time, message, context):
    job_id = os.urandom(16).hex()

    def job_function():
        context.bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")
        scheduler.remove_job(job_id)

    scheduler.add_job(job_function, trigger='date', run_date=reminder_time, id=job_id)
    context.bot.send_message(chat_id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%d.%m.%Y %H:%M')}")

    user_state[chat_id] = None

def show_reminders(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.edit_message_text("üîî –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    if data == "set_reminder":
        set_reminder_menu(update, context)
    elif data == "custom_date":
        handle_time_selection(update, context)
    elif data == "show_reminders":
        show_reminders(update, context)
    elif data == "main_menu":
        start(update, context)

def main():
    print("‚öôÔ∏è –ó–∞–ø—É—Å–∫ main()")
    threading.Thread(target=ping_self, daemon=True).start()
    print("üåê –ü–∏–Ω–≥–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    print(f"üîë TOKEN: {'–ù–∞–π–¥–µ–Ω' if TOKEN else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    print("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±—É–¥–µ—Ç –∂–∏—Ç—å –≤–µ—á–Ω–æ!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
